// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/25/2024 17:43:04"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    exp1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module exp1_vlg_sample_tst(
	a,
	b,
	sampler_tx
);
input  a;
input  b;
output sampler_tx;

reg sample;
time current_time;
always @(a or b)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module exp1_vlg_check_tst (
	f1,
	f2,
	f3,
	f4,
	f5,
	f6,
	f7,
	sampler_rx
);
input  f1;
input  f2;
input  f3;
input  f4;
input  f5;
input  f6;
input  f7;
input sampler_rx;

reg  f1_expected;
reg  f2_expected;
reg  f3_expected;
reg  f4_expected;
reg  f5_expected;
reg  f6_expected;
reg  f7_expected;

reg  f1_prev;
reg  f2_prev;
reg  f3_prev;
reg  f4_prev;
reg  f5_prev;
reg  f6_prev;
reg  f7_prev;

reg  f1_expected_prev;
reg  f2_expected_prev;
reg  f3_expected_prev;
reg  f4_expected_prev;
reg  f5_expected_prev;
reg  f6_expected_prev;
reg  f7_expected_prev;

reg  last_f1_exp;
reg  last_f2_exp;
reg  last_f3_exp;
reg  last_f4_exp;
reg  last_f5_exp;
reg  last_f6_exp;
reg  last_f7_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	f1_prev = f1;
	f2_prev = f2;
	f3_prev = f3;
	f4_prev = f4;
	f5_prev = f5;
	f6_prev = f6;
	f7_prev = f7;
end

// update expected /o prevs

always @(trigger)
begin
	f1_expected_prev = f1_expected;
	f2_expected_prev = f2_expected;
	f3_expected_prev = f3_expected;
	f4_expected_prev = f4_expected;
	f5_expected_prev = f5_expected;
	f6_expected_prev = f6_expected;
	f7_expected_prev = f7_expected;
end



// expected f1
initial
begin
	f1_expected = 1'bX;
end 

// expected f2
initial
begin
	f2_expected = 1'bX;
end 

// expected f3
initial
begin
	f3_expected = 1'bX;
end 

// expected f4
initial
begin
	f4_expected = 1'bX;
end 

// expected f5
initial
begin
	f5_expected = 1'bX;
end 

// expected f6
initial
begin
	f6_expected = 1'bX;
end 

// expected f7
initial
begin
	f7_expected = 1'bX;
end 
// generate trigger
always @(f1_expected or f1 or f2_expected or f2 or f3_expected or f3 or f4_expected or f4 or f5_expected or f5 or f6_expected or f6 or f7_expected or f7)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected f1 = %b | expected f2 = %b | expected f3 = %b | expected f4 = %b | expected f5 = %b | expected f6 = %b | expected f7 = %b | ",f1_expected_prev,f2_expected_prev,f3_expected_prev,f4_expected_prev,f5_expected_prev,f6_expected_prev,f7_expected_prev);
	$display("| real f1 = %b | real f2 = %b | real f3 = %b | real f4 = %b | real f5 = %b | real f6 = %b | real f7 = %b | ",f1_prev,f2_prev,f3_prev,f4_prev,f5_prev,f6_prev,f7_prev);
`endif
	if (
		( f1_expected_prev !== 1'bx ) && ( f1_prev !== f1_expected_prev )
		&& ((f1_expected_prev !== last_f1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f1_expected_prev);
		$display ("     Real value = %b", f1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f1_exp = f1_expected_prev;
	end
	if (
		( f2_expected_prev !== 1'bx ) && ( f2_prev !== f2_expected_prev )
		&& ((f2_expected_prev !== last_f2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f2_expected_prev);
		$display ("     Real value = %b", f2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f2_exp = f2_expected_prev;
	end
	if (
		( f3_expected_prev !== 1'bx ) && ( f3_prev !== f3_expected_prev )
		&& ((f3_expected_prev !== last_f3_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f3_expected_prev);
		$display ("     Real value = %b", f3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_f3_exp = f3_expected_prev;
	end
	if (
		( f4_expected_prev !== 1'bx ) && ( f4_prev !== f4_expected_prev )
		&& ((f4_expected_prev !== last_f4_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f4_expected_prev);
		$display ("     Real value = %b", f4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_f4_exp = f4_expected_prev;
	end
	if (
		( f5_expected_prev !== 1'bx ) && ( f5_prev !== f5_expected_prev )
		&& ((f5_expected_prev !== last_f5_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f5_expected_prev);
		$display ("     Real value = %b", f5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_f5_exp = f5_expected_prev;
	end
	if (
		( f6_expected_prev !== 1'bx ) && ( f6_prev !== f6_expected_prev )
		&& ((f6_expected_prev !== last_f6_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f6_expected_prev);
		$display ("     Real value = %b", f6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_f6_exp = f6_expected_prev;
	end
	if (
		( f7_expected_prev !== 1'bx ) && ( f7_prev !== f7_expected_prev )
		&& ((f7_expected_prev !== last_f7_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f7_expected_prev);
		$display ("     Real value = %b", f7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_f7_exp = f7_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#300000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module exp1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a;
reg b;
// wires                                               
wire f1;
wire f2;
wire f3;
wire f4;
wire f5;
wire f6;
wire f7;

wire sampler;                             

// assign statements (if any)                          
exp1 i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.f1(f1),
	.f2(f2),
	.f3(f3),
	.f4(f4),
	.f5(f5),
	.f6(f6),
	.f7(f7)
);

// a
always
begin
	a = 1'b0;
	a = #30000 1'b1;
	#30000;
end 

// b
always
begin
	b = 1'b0;
	b = #10000 1'b1;
	#10000;
end 

exp1_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.sampler_tx(sampler)
);

exp1_vlg_check_tst tb_out(
	.f1(f1),
	.f2(f2),
	.f3(f3),
	.f4(f4),
	.f5(f5),
	.f6(f6),
	.f7(f7),
	.sampler_rx(sampler)
);
endmodule

