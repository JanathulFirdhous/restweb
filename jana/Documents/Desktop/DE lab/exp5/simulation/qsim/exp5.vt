// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/25/2024 21:42:06"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    exp5
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module exp5_vlg_sample_tst(
	din,
	sampler_tx
);
input [0:7] din;
output sampler_tx;

reg sample;
time current_time;
always @(din)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module exp5_vlg_check_tst (
	a,
	b,
	c,
	sampler_rx
);
input  a;
input  b;
input  c;
input sampler_rx;

reg  a_expected;
reg  b_expected;
reg  c_expected;

reg  a_prev;
reg  b_prev;
reg  c_prev;

reg  a_expected_prev;
reg  b_expected_prev;
reg  c_expected_prev;

reg  last_a_exp;
reg  last_b_exp;
reg  last_c_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	a_prev = a;
	b_prev = b;
	c_prev = c;
end

// update expected /o prevs

always @(trigger)
begin
	a_expected_prev = a_expected;
	b_expected_prev = b_expected;
	c_expected_prev = c_expected;
end



// expected a
initial
begin
	a_expected = 1'bX;
end 

// expected b
initial
begin
	b_expected = 1'bX;
end 

// expected c
initial
begin
	c_expected = 1'bX;
end 
// generate trigger
always @(a_expected or a or b_expected or b or c_expected or c)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected a = %b | expected b = %b | expected c = %b | ",a_expected_prev,b_expected_prev,c_expected_prev);
	$display("| real a = %b | real b = %b | real c = %b | ",a_prev,b_prev,c_prev);
`endif
	if (
		( a_expected_prev !== 1'bx ) && ( a_prev !== a_expected_prev )
		&& ((a_expected_prev !== last_a_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp = a_expected_prev;
	end
	if (
		( b_expected_prev !== 1'bx ) && ( b_prev !== b_expected_prev )
		&& ((b_expected_prev !== last_b_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp = b_expected_prev;
	end
	if (
		( c_expected_prev !== 1'bx ) && ( c_prev !== c_expected_prev )
		&& ((c_expected_prev !== last_c_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp = c_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#300000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module exp5_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [0:7] din;
// wires                                               
wire a;
wire b;
wire c;

wire sampler;                             

// assign statements (if any)                          
exp5 i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.din(din)
);
// din[ 7 ]
always
begin
	din[7] = 1'b0;
	din[7] = #50000 1'b1;
	# 50000;
	repeat(2)
	begin
		din[7] = 1'b0;
		din[7] = #50000 1'b1;
		# 50000;
	end
	#0;
end 
// din[ 6 ]
initial
begin
	din[6] = 1'b0;
	din[6] = #100000 1'b1;
	din[6] = #100000 1'b0;
end 
// din[ 5 ]
always
begin
	din[5] = 1'b0;
	din[5] = #200000 1'b1;
	#100000;
end 
// din[ 4 ]
initial
begin
	din[4] = 1'b0;
end 
// din[ 3 ]
initial
begin
	din[3] = 1'b0;
end 
// din[ 2 ]
initial
begin
	din[2] = 1'b0;
end 
// din[ 1 ]
initial
begin
	din[1] = 1'b0;
end 
// din[ 0 ]
initial
begin
	din[0] = 1'b0;
end 

exp5_vlg_sample_tst tb_sample (
	.din(din),
	.sampler_tx(sampler)
);

exp5_vlg_check_tst tb_out(
	.a(a),
	.b(b),
	.c(c),
	.sampler_rx(sampler)
);
endmodule

